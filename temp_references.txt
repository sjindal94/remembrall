Start putting all the references here:


For basic building up of chrome plugin
https://medium.freecodecamp.org/how-to-create-a-chrome-extension-part-1-ad2a3a77541
https://medium.freecodecamp.org/how-to-create-and-publish-a-chrome-extension-in-20-minutes-6dc8395d7153
https://blog.hartleybrody.com/chrome-extension/
https://developer.chrome.com/extensions/overview#arch


For storing options
https://developer.chrome.com/apps/storage

For parsing tab page dom
https://www.thepolyglotdeveloper.com/2018/09/creating-basic-chrome-extension/


https://riptutorial.com/google-chrome-extension/example/7152/send-a-response-asynchronously




Extras
Add helper page for first time users
https://stackoverflow.com/questions/5745822/open-a-help-page-after-chrome-extension-is-installed-first-time

Use omnibox

Do this
https://developer.chrome.com/extensions/contentSecurityPolicy





Helpers for manifest.json file(Comments are not allowed in json file)


//https://developer.chrome.com/extensions/background_pages
//check this for "persistent" use


chrome.webRequest.onBeforeRequest.addListener((details) => {
    if (details.url == ‘https://api.segment.io/v1/t') {
    }
});

https://tech.trustpilot.com/what-i-learned-from-making-a-chrome-extension-51f366ad141



***
Need to add   "content_security_policy": "script-src 'self' 'unsafe-eval'; object-src 'self'"
***


Design Decisions for report:

The next step is to figure out whether your extension makes more sense as a browser action or a page action. The main difference is how they appear in the browser’s UI:
Browser Actions are permanently displayed to the right of the address bar. These are good if your extension can work on any website, or if the extension is website agnostic. This is probably the right option for most extensions.
So we choose Browser action

We are using current temperature for salting purposes





Neat observations observed while working on the project

1)  CSP blocks the inline scripts which we learnt from the class.